# $Id$

#test files for mechanics module
IF(ENABLE_PYTHON_TESTS)
  ADD_TEST(p::mechanics::Brick8N                           ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Brick8N.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::ConstitutiveLaws                  ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/ConstitutiveLaws.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::CreateNodesAndGroupOperations     ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/CreateNodesAndGroupOperations.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::GlobalDofs                        ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/GlobalDofs.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  # ADD_TEST(p::mechanics::NonlocalDamagePlasticity          ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/NonlocalDamagePlasticity.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::Section                           ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Sections.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::Tetrahedron10N                    ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Tetrahedron10N.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::DeleteElemNode                    ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/DeleteElemNode.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_SOURCE_DIR})
  ADD_TEST(p::mechanics::ElementUniaxialTest               ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/ElementUniaxialTest.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_BINARY_DIR})
  ADD_TEST(p::mechanics::Quad2DPatchTest                   ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/Quad2DPatchTest.py ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} ${CMAKE_CURRENT_BINARY_DIR})
  add_test(p::mechanics::HeatConduction ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/HeatConduction.py)

  # set PYTHONPATH environment for all examples

  SET(MYTESTS
  p::mechanics::Brick8N
  p::mechanics::ConstitutiveLaws
  p::mechanics::CreateNodesAndGroupOperations
  p::mechanics::GlobalDofs
  #p::mechanics::NonlocalDamagePlasticity
  p::mechanics::Section
  p::mechanics::Tetrahedron10N
  p::mechanics::DeleteElemNode
  p::mechanics::ElementUniaxialTest
  p::mechanics::Quad2DPatchTest
  p::mechanics::HeatConduction
  )
  SET_PROPERTY(TEST ${MYTESTS}  PROPERTY ENVIRONMENT "PYTHONPATH=${CMAKE_BINARY_DIR}/src")
ENDIF(ENABLE_PYTHON_TESTS)


IF (ENABLE_OPENMP AND OPENMP_FOUND AND NOT ENABLE_DEBUG)
  ADD_EXECUTABLE(ParallelAssembly ParallelAssembly.cpp)
  TARGET_LINK_LIBRARIES(ParallelAssembly NuToMath NuToMechanics NuToBase)
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ParallelAssembly NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)  
  IF (ENABLE_OPTIMIZE)
    TARGET_LINK_LIBRARIES(ParallelAssembly NuToOptimize)
  ENDIF (ENABLE_OPTIMIZE)
  IF(MINGW)
    SET_TARGET_PROPERTIES(OpenMP PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
   ADD_TEST(c::mechanics::ParallelAssembly ${CMAKE_CURRENT_BUILD_DIR}/ParallelAssembly)
ENDIF (ENABLE_OPENMP AND OPENMP_FOUND AND NOT ENABLE_DEBUG)

IF(ENABLE_C++_TESTS)

# GradientDamage
  ADD_EXECUTABLE(GradientDamage GradientDamage.cpp)
  TARGET_LINK_LIBRARIES(GradientDamage NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(GradientDamage NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(GradientDamage ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(GradientDamage PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::GradientDamage ${CMAKE_CURRENT_BUILD_DIR}/GradientDamage)

  # test Newmark time integration
  ADD_EXECUTABLE(NewmarkPlane2D4N NewmarkPlane2D4N.cpp)
  TARGET_LINK_LIBRARIES(NewmarkPlane2D4N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(NewmarkPlane2D4N NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(NewmarkPlane2D4N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(NewmarkPlane2D4N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::NewmarkPlane2D4N ${CMAKE_CURRENT_BUILD_DIR}/NewmarkPlane2D4N)
  
  # cycle jump local
  #  ADD_EXECUTABLE(Brick8NcycleJump Brick8NcycleJump.cpp)
  #TARGET_LINK_LIBRARIES(Brick8NcycleJump NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  #IF (ENABLE_VISUALIZE)
  #  TARGET_LINK_LIBRARIES(Brick8NcycleJump NuToVisualize)
  #ENDIF (ENABLE_VISUALIZE)
  #IF(MUMPS_FOUND)
  #  TARGET_LINK_LIBRARIES(Brick8NcycleJump ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  #ENDIF(MUMPS_FOUND)
  #IF(MINGW)
  #  SET_TARGET_PROPERTIES(Brick8NcycleJump PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  #ENDIF(MINGW)
  #ADD_TEST(c::mechanics::Brick8NcycleJump ${CMAKE_CURRENT_BUILD_DIR}/Brick8NcycleJump)
  
  # cycle jump nonlocal 
  #ADD_EXECUTABLE(CycleJumpNonlocal CycleJumpNonlocal.cpp)
  #TARGET_LINK_LIBRARIES(CycleJumpNonlocal NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  #IF (ENABLE_VISUALIZE)
  #  TARGET_LINK_LIBRARIES(CycleJumpNonlocal NuToVisualize)
  #ENDIF (ENABLE_VISUALIZE)
  #IF(MUMPS_FOUND)
  #  TARGET_LINK_LIBRARIES(CycleJumpNonlocal ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  #ENDIF(MUMPS_FOUND)
  #IF(MINGW)
  #  SET_TARGET_PROPERTIES(Brick8NcycleJump PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  #ENDIF(MINGW)
  #ADD_TEST(c::mechanics::CycleJumpNonlocal ${CMAKE_CURRENT_BUILD_DIR}/CycleJumpNonlocal)

ADD_EXECUTABLE(RungeKutta RungeKutta.cpp)
  TARGET_LINK_LIBRARIES(RungeKutta NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(RungeKutta NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(RungeKutta ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(RungeKutta PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::RungeKutta ${CMAKE_CURRENT_BUILD_DIR}/RungeKutta)
  
  ADD_EXECUTABLE(ImplEx ImplEx.cpp)
  TARGET_LINK_LIBRARIES(ImplEx NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ImplEx NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(ImplEx ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(ImplEx PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::ImplEx ${CMAKE_CURRENT_BUILD_DIR}/ImplEx)

  ADD_EXECUTABLE(EngineeringInvariants EngineeringInvariants.cpp)
  TARGET_LINK_LIBRARIES(EngineeringInvariants NuToMechanics NuToMath NuToBase)
  if(ENABLE_VISUALIZE)
      target_link_libraries(EngineeringInvariants NuToVisualize)
  endif()
  IF(MINGW)
    SET_TARGET_PROPERTIES(EngineeringInvariants PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::EngineeringInvariants ${CMAKE_CURRENT_BUILD_DIR}/EngineeringInvariants)


  # test Newmark time integration with a dogbone specimen
  # ADD_EXECUTABLE(DogBoneDirectNewmark DogBoneDirectNewmark.cpp)
  # configure_file(${CMAKE_CURRENT_SOURCE_DIR}/DogBoneDirectNewmarkGeometry.geo ${CMAKE_CURRENT_BINARY_DIR}/DogBoneDirectNewmarkGeometry.geo  COPYONLY)
  # configure_file(${CMAKE_CURRENT_SOURCE_DIR}/DogBoneDirectNewmarkGeometry.msh ${CMAKE_CURRENT_BINARY_DIR}/DogBoneDirectNewmarkGeometry.msh  COPYONLY)
  # configure_file(${CMAKE_CURRENT_SOURCE_DIR}/results/Linuxx86_64/DogboneDirectNewmarkresultAllLoadStepsRef.dat ${CMAKE_CURRENT_BINARY_DIR}/DogboneDirectNewmarkresultAllLoadStepsRef.dat  COPYONLY)

  # TARGET_LINK_LIBRARIES(DogBoneDirectNewmark NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
  # IF (ENABLE_VISUALIZE)
  #   TARGET_LINK_LIBRARIES(DogBoneDirectNewmark NuToVisualize)
  # ENDIF (ENABLE_VISUALIZE)
  # IF(MUMPS_FOUND)
  #   TARGET_LINK_LIBRARIES(DogBoneDirectNewmark ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  # ENDIF(MUMPS_FOUND)
  # IF(MINGW)
  #   SET_TARGET_PROPERTIES(DogBoneDirectNewmark PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  # ENDIF(MINGW)
  # ADD_TEST(c::mechanics::DogBoneDirectNewmark ${CMAKE_CURRENT_BUILD_DIR}/DogBoneDirectNewmark)

  # test surface load integration in 2D
  ADD_EXECUTABLE(SurfaceLoad SurfaceLoad.cpp)
  TARGET_LINK_LIBRARIES(SurfaceLoad NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(SurfaceLoad NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(SurfaceLoad ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  ADD_TEST(c::mechanics::SurfaceLoad ${CMAKE_CURRENT_BUILD_DIR}/SurfaceLoad)

  # test the CheckStiffness method globally and locally
  ADD_EXECUTABLE(CoefficientChecks CoefficientChecks.cpp)
  TARGET_LINK_LIBRARIES(CoefficientChecks NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  if(ENABLE_VISUALIZE)
      target_link_libraries(CoefficientChecks NuToVisualize)
  endif()
  ADD_TEST(c::mechanics::CoefficientChecks ${CMAKE_CURRENT_BUILD_DIR}/CoefficientChecks)

  ADD_EXECUTABLE(ElementUniaxialTruss1D ElementUniaxialTruss1D.cpp)
  TARGET_LINK_LIBRARIES(ElementUniaxialTruss1D NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ElementUniaxialTruss1D NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(ElementUniaxialTruss1D ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(ElementUniaxialTruss1D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::ElementUniaxialTruss1D ${CMAKE_CURRENT_BUILD_DIR}/ElementUniaxialTruss1D)

  ADD_EXECUTABLE(ElementUniaxialTriangle2D ElementUniaxialTriangle2D.cpp)
  TARGET_LINK_LIBRARIES(ElementUniaxialTriangle2D NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ElementUniaxialTriangle2D NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(ElementUniaxialTriangle2D ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(ElementUniaxialTriangle2D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::ElementUniaxialTriangle2D ${CMAKE_CURRENT_BUILD_DIR}/ElementUniaxialTriangle2D)

  ADD_EXECUTABLE(ElementUniaxialQuad2D ElementUniaxialQuad2D.cpp)
  TARGET_LINK_LIBRARIES(ElementUniaxialQuad2D NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ElementUniaxialQuad2D NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(ElementUniaxialQuad2D ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(ElementUniaxialQuad2D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::ElementUniaxialQuad2D ${CMAKE_CURRENT_BUILD_DIR}/ElementUniaxialQuad2D)

  ADD_EXECUTABLE(ElementUniaxialTetrahedron3D ElementUniaxialTetrahedron3D.cpp)
  TARGET_LINK_LIBRARIES(ElementUniaxialTetrahedron3D NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ElementUniaxialTetrahedron3D NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(ElementUniaxialTetrahedron3D ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(ElementUniaxialTetrahedron3D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::ElementUniaxialTetrahedron3D ${CMAKE_CURRENT_BUILD_DIR}/ElementUniaxialTetrahedron3D)

  ADD_EXECUTABLE(ElementUniaxialBrick3D ElementUniaxialBrick3D.cpp)
  TARGET_LINK_LIBRARIES(ElementUniaxialBrick3D NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(ElementUniaxialBrick3D NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(ElementUniaxialBrick3D ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(ElementUniaxialBrick3D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::ElementUniaxialBrick3D ${CMAKE_CURRENT_BUILD_DIR}/ElementUniaxialBrick3D)

ADD_EXECUTABLE(LobattoIntegration LobattoIntegration.cpp)
TARGET_LINK_LIBRARIES(LobattoIntegration NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(LobattoIntegration NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(LobattoIntegration ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(LobattoIntegration PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(c::mechanics::LobattoIntegration ${CMAKE_CURRENT_BUILD_DIR}/LobattoIntegration)

# NonlocalDamagePlasticityModel
# ADD_EXECUTABLE(NonlocalDamagePlasticityModel NonlocalDamagePlasticityModel.cpp)
# TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityModel NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
# IF (ENABLE_VISUALIZE)
#   TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityModel NuToVisualize)
# ENDIF (ENABLE_VISUALIZE)
# IF(MUMPS_FOUND)
#   TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityModel ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# ENDIF(MUMPS_FOUND)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(NonlocalDamagePlasticityModel PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)
# ADD_TEST(c::mechanics::NonlocalDamagePlasticityModel ${CMAKE_CURRENT_BUILD_DIR}/NonlocalDamagePlasticityModel)

#   # MoistureTransport
#   IF(ENABLE_METAMODEL)
#     ADD_EXECUTABLE(MoistureTransport1D MoistureTransport1D.cpp)
#     TARGET_LINK_LIBRARIES(MoistureTransport1D NuToMetamodel NuToMechanics NuToMath NuToBase)
#     ADD_TEST(c::mechanics::MoistureTransport1D ${CMAKE_CURRENT_BUILD_DIR}/MoistureTransport1D)
#   IF(MINGW)
#     SET_TARGET_PROPERTIES(MoistureTransport1D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#   ENDIF(MINGW)
#   ENDIF(ENABLE_METAMODEL)

#   # MoistureTransport
#   IF(ENABLE_METAMODEL)
#     ADD_EXECUTABLE(MoistureTransport3D MoistureTransport3D.cpp)
#     TARGET_LINK_LIBRARIES(MoistureTransport3D NuToMetamodel NuToMechanics NuToMath NuToBase)
#     ADD_TEST(c::mechanics::MoistureTransport3D ${CMAKE_CURRENT_BUILD_DIR}/MoistureTransport3D)
#   IF(MINGW)
#     SET_TARGET_PROPERTIES(MoistureTransport3D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#   ENDIF(MINGW)
#   ENDIF(ENABLE_METAMODEL)

#   # MultiPhysics2D
#   IF(ENABLE_METAMODEL)
#     ADD_EXECUTABLE(MultiPhysics2D MultiPhysics2D.cpp)
#     TARGET_LINK_LIBRARIES(MultiPhysics2D NuToMetamodel NuToMechanics NuToMath NuToBase)
#     ADD_TEST(c::mechanics::MultiPhysics2D ${CMAKE_CURRENT_BUILD_DIR}/MultiPhysics2D)
#   IF(MINGW)
#     SET_TARGET_PROPERTIES(MultiPhysics2D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#   ENDIF(MINGW)
#   ENDIF(ENABLE_METAMODEL)

  #  new interpolation type tests
  CONFIGURE_FILE(2D.msh ${CMAKE_CURRENT_BINARY_DIR})
  ADD_EXECUTABLE(InterpolationTypes InterpolationTypes.cpp)
  TARGET_LINK_LIBRARIES(InterpolationTypes NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} )
  IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(InterpolationTypes NuToVisualize)
  ENDIF (ENABLE_VISUALIZE)
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(InterpolationTypes ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  ADD_TEST(c::mechanics::InterpolationTypes ${CMAKE_CURRENT_BUILD_DIR}/InterpolationTypes)


    # structure evaluate

  # ADD_EXECUTABLE(StructureEvaluate StructureEvaluate.cpp)
  #   TARGET_LINK_LIBRARIES(StructureEvaluate NuToMechanics NuToMath NuToBase)
  #   ADD_TEST(c::mechanics::StructureEvaluate ${CMAKE_CURRENT_BUILD_DIR}/StructureEvaluate)
  # IF(MINGW)
  #   SET_TARGET_PROPERTIES(StructureEvaluate PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  # ENDIF(MINGW)

   # TrussIn2D
   ADD_EXECUTABLE(TrussIn2D TrussIn2D.cpp)
     TARGET_LINK_LIBRARIES(TrussIn2D NuToMechanics NuToMath NuToBase)
   IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(TrussIn2D NuToVisualize)
   ENDIF (ENABLE_VISUALIZE)
     ADD_TEST(c::mechanics::TrussIn2D ${CMAKE_CURRENT_BUILD_DIR}/TrussIn2D)
   IF(MINGW)
     SET_TARGET_PROPERTIES(TrussIn2D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
   ENDIF(MINGW)

   # TrussIn3D
   ADD_EXECUTABLE(TrussIn3D TrussIn3D.cpp)
     TARGET_LINK_LIBRARIES(TrussIn3D NuToMechanics NuToMath NuToBase)
   IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(TrussIn3D NuToVisualize)
   ENDIF (ENABLE_VISUALIZE)    
     ADD_TEST(c::mechanics::TrussIn3D ${CMAKE_CURRENT_BUILD_DIR}/TrussIn3D)
   IF(MINGW)
     SET_TARGET_PROPERTIES(TrussIn3D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
   ENDIF(MINGW)

   # InterfaceElements
   CONFIGURE_FILE(InterfaceElements.msh ${CMAKE_CURRENT_BINARY_DIR})
   ADD_EXECUTABLE(InterfaceElements InterfaceElements.cpp)
   TARGET_LINK_LIBRARIES(InterfaceElements NuToMechanics NuToMath NuToBase)
   IF (ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(InterfaceElements NuToVisualize)
   ENDIF (ENABLE_VISUALIZE)   
   ADD_TEST(c::mechanics::InterfaceElements ${CMAKE_CURRENT_BUILD_DIR}/InterfaceElements)

  # BlockMatrices
  ADD_EXECUTABLE(BlockMatrices BlockMatrices.cpp)
  TARGET_LINK_LIBRARIES(BlockMatrices NuToMechanics NuToMath NuToBase)
  if(ENABLE_VISUALIZE)
      target_link_libraries(BlockMatrices NuToVisualize)
  endif()
  IF(MINGW)
    SET_TARGET_PROPERTIES(BlockMatrices PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(c::mechanics::BlockMatrices ${CMAKE_CURRENT_BUILD_DIR}/BlockMatrices)

  # ConstraintsNodeToElement
  CONFIGURE_FILE(ConstraintsNodeToElementMatrixMesh2d.msh ${CMAKE_CURRENT_BINARY_DIR})
  CONFIGURE_FILE(ConstraintsNodeToElementFiberMesh2d.msh ${CMAKE_CURRENT_BINARY_DIR})
  CONFIGURE_FILE(ConstraintsNodeToElementMatrixMesh3d.msh ${CMAKE_CURRENT_BINARY_DIR})
  CONFIGURE_FILE(ConstraintsNodeToElementFiberMesh3d.msh ${CMAKE_CURRENT_BINARY_DIR})
  ADD_EXECUTABLE(ConstraintsNodeToElement ConstraintsNodeToElement.cpp)
  TARGET_LINK_LIBRARIES(ConstraintsNodeToElement NuToMechanics NuToMath NuToBase)
  if(ENABLE_VISUALIZE)
      target_link_libraries(ConstraintsNodeToElement NuToVisualize)
  endif()
  ADD_TEST(c::mechanics::ConstraintsNodeToElement ${CMAKE_CURRENT_BUILD_DIR}/ConstraintsNodeToElement)


  # IntegrationPointVoronoiCells
  IF (ENABLE_VISUALIZE)
    ADD_EXECUTABLE(IntegrationPointVoronoiCells IntegrationPointVoronoiCells.cpp)
    TARGET_LINK_LIBRARIES(IntegrationPointVoronoiCells NuToMechanics NuToMath NuToBase NuToVisualize)
    ADD_TEST(c::mechanics::IntegrationPointVoronoiCells ${CMAKE_CURRENT_BUILD_DIR}/IntegrationPointVoronoiCells)
    IF(MINGW)
      SET_TARGET_PROPERTIES(IntegrationPointVoronoiCells PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
    ENDIF(MINGW)
  ENDIF (ENABLE_VISUALIZE)

#MisesPlasticity
ADD_EXECUTABLE(MisesPlasticity MisesPlasticity.cpp)
TARGET_LINK_LIBRARIES(MisesPlasticity NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(MisesPlasticity NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
	TARGET_LINK_LIBRARIES(MisesPlasticity ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(MisesPlasticity PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
    ADD_TEST(c::mechanics::MisesPlasticity ${CMAKE_CURRENT_BUILD_DIR}/MisesPlasticity)


ADD_EXECUTABLE(ConstitutiveLawMoistureTransport ConstitutiveLawMoistureTransport.cpp)
TARGET_LINK_LIBRARIES(ConstitutiveLawMoistureTransport NuToMechanics NuToMath NuToBase)
if(ENABLE_VISUALIZE)
    target_link_libraries(ConstitutiveLawMoistureTransport NuToVisualize)
endif()
IF(MINGW)
    SET_TARGET_PROPERTIES(ConstitutiveLawMoistureTransport PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(c::mechanics::MoistureTransport ${CMAKE_CURRENT_BUILD_DIR}/ConstitutiveLawMoistureTransport)


#ADD_EXECUTABLE(MultipleConstitutiveLaws MultipleConstitutiveLaws.cpp)
#TARGET_LINK_LIBRARIES(MultipleConstitutiveLaws NuToMechanics NuToMath NuToBase)
#if(ENABLE_VISUALIZE)
#    target_link_libraries(MultipleConstitutiveLaws NuToVisualize)
#endif()
#IF(MINGW)
#    SET_TARGET_PROPERTIES(MultipleConstitutiveLaws PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#ENDIF(MINGW)
#ADD_TEST(c::mechanics::MultipleConstitutiveLaws ${CMAKE_CURRENT_BUILD_DIR}/MultipleConstitutiveLaws)

ADD_EXECUTABLE(Shrinkage Shrinkage.cpp)
TARGET_LINK_LIBRARIES(Shrinkage NuToMechanics NuToMath NuToBase)
IF(ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(Shrinkage NuToVisualize)
ENDIF(ENABLE_VISUALIZE)
IF(MINGW)
    SET_TARGET_PROPERTIES(Shrinkage PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(c::mechanics::Shrinkage ${CMAKE_CURRENT_BUILD_DIR}/Shrinkage)


ADD_EXECUTABLE(PhaseField PhaseField.cpp)
TARGET_LINK_LIBRARIES(PhaseField NuToMechanics NuToMath NuToBase)
IF(ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(PhaseField NuToVisualize)
ENDIF(ENABLE_VISUALIZE)
IF(MINGW)
    SET_TARGET_PROPERTIES(PhaseField PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(c::mechanics::PhaseField ${CMAKE_CURRENT_BUILD_DIR}/PhaseField)



ADD_EXECUTABLE(HeatConduction HeatConduction.cpp)
TARGET_LINK_LIBRARIES(HeatConduction NuToMechanics NuToMath NuToBase)
IF(ENABLE_VISUALIZE)
    TARGET_LINK_LIBRARIES(HeatConduction NuToVisualize)
ENDIF(ENABLE_VISUALIZE)




ENDIF(ENABLE_C++_TESTS)

IF(ENABLE_C++_TESTS_WIP)

ENDIF(ENABLE_C++_TESTS_WIP)

if(ENABLE_UNIT_TESTS)
    add_executable(test_heatconduction test_heatconduction.cpp)
    target_link_libraries(test_heatconduction NuToMechanics NuToMath NuToBase)
    if(ENABLE_VISUALIZE)
        target_link_libraries(test_heatconduction NuToVisualize)
    endif()
    add_test(c::mechanics::test_heatconduction ${CMAKE_CURRENT_BUILD_DIR}/test_heatconduction)
endif()
