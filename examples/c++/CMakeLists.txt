# $Id$

# 
# # Operators
# ADD_EXECUTABLE(TestOperators TestOperators.cpp)
# TARGET_LINK_LIBRARIES(TestOperators NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES})
# IF(MUMPS_FOUND)
#   TARGET_LINK_LIBRARIES(TestOperators ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# ENDIF(MUMPS_FOUND)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(TestOperators PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)
# 
# IF (ENABLE_OPENMP AND OPENMP_FOUND)
#   ADD_EXECUTABLE(OpenMP OpenMP.cpp)
#   TARGET_LINK_LIBRARIES(OpenMP NuToMath)
#   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/openMPplot.gnu  ${CMAKE_CURRENT_BINARY_DIR}/openMPplot.gnu  COPYONLY)
#   IF(MINGW)
#     SET_TARGET_PROPERTIES(OpenMP PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#   ENDIF(MINGW)
# ENDIF (ENABLE_OPENMP AND OPENMP_FOUND)
 
IF(ENABLE_MKL AND MKLSolver_FOUND)
  ADD_EXECUTABLE(SparseDirectSolverMKLPardiso SparseDirectSolverMKLPardiso.cpp)
  TARGET_LINK_LIBRARIES(SparseDirectSolverMKLPardiso NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${MKLSolver_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  IF(MINGW)
    SET_TARGET_PROPERTIES(SparseDirectSolverMKLPardiso PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(EXAMPLES::Cpp::SparseDirectSolverMKLPardiso ${CMAKE_CURRENT_BUILD_DIR}/SparseDirectSolverMKLPardiso)
ENDIF(ENABLE_MKL AND MKLSolver_FOUND)
 
IF(ENABLE_MUMPS AND MUMPS_FOUND)
   ADD_EXECUTABLE(SparseDirectSolverMUMPS SparseDirectSolverMUMPS.cpp)
   TARGET_LINK_LIBRARIES(SparseDirectSolverMUMPS NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
   IF(MINGW)
     SET_TARGET_PROPERTIES(SparseDirectSolverMUMPS PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
   ENDIF(MINGW)
   ADD_TEST(EXAMPLES::Cpp::SparseDirectSolverMUMPS ${CMAKE_CURRENT_BUILD_DIR}/SparseDirectSolverMUMPS)
ENDIF(ENABLE_MUMPS AND MUMPS_FOUND)

IF(ENABLE_VISUALIZE)
  ADD_EXECUTABLE(VisualizeTruss1D2N VisualizeTruss1D2N.cpp)
  TARGET_LINK_LIBRARIES(VisualizeTruss1D2N NuToMechanics NuToVisualize NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  IF(MUMPS_FOUND)
    TARGET_LINK_LIBRARIES(VisualizeTruss1D2N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF(MUMPS_FOUND)
  IF(MINGW)
    SET_TARGET_PROPERTIES(VisualizeTruss1D2N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  ADD_TEST(EXAMPLES::Cpp::VisualizeTruss1D2N ${CMAKE_CURRENT_BUILD_DIR}/VisualizeTruss1D2N)
ENDIF(ENABLE_VISUALIZE)

# Brick8N
ADD_EXECUTABLE(Brick8N Brick8N.cpp)
TARGET_LINK_LIBRARIES(Brick8N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(Brick8N NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(Brick8N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(Brick8N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::Brick8N ${CMAKE_CURRENT_BUILD_DIR}/Brick8N)

# Test ConstraintsLagrange1D
ADD_EXECUTABLE(ConstraintsLagrange1D ConstraintsLagrange1D)
TARGET_LINK_LIBRARIES(ConstraintsLagrange1D NuToBase NuToMechanics NuToMath ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(ConstraintsLagrange1D NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(ConstraintsLagrange1D ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(ConstraintsLagrange1D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::ConstraintsLagrange1D ${CMAKE_CURRENT_BUILD_DIR}/ConstraintsLagrange1D)

# NonlocalDamagePlasticity
ADD_EXECUTABLE(NonlocalDamagePlasticity NonlocalDamagePlasticity.cpp)
TARGET_LINK_LIBRARIES(NonlocalDamagePlasticity NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(NonlocalDamagePlasticity NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(NonlocalDamagePlasticity ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(NonlocalDamagePlasticity PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::NonlocalDamagePlasticity ${CMAKE_CURRENT_BUILD_DIR}/NonlocalDamagePlasticity)

# NonlocalDamagePlasticityBeam
#ADD_EXECUTABLE(NonlocalDamagePlasticityBeam NonlocalDamagePlasticityBeam.cpp)
#TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityBeam NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
#IF (ENABLE_VISUALIZE)
#  TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityBeam NuToVisualize)
#ENDIF (ENABLE_VISUALIZE)
#IF(MUMPS_FOUND)
#  TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityBeam ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
#ENDIF(MUMPS_FOUND)
#IF(MINGW)
#  SET_TARGET_PROPERTIES(NonlocalDamagePlasticityBeam PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#ENDIF(MINGW)

# NonlocalDamagePlasticityModel
#ADD_EXECUTABLE(NonlocalDamagePlasticityModel NonlocalDamagePlasticityModel.cpp)
#TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityModel NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
#IF (ENABLE_VISUALIZE)
#  TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityModel NuToVisualize)
#ENDIF (ENABLE_VISUALIZE)
#IF(MUMPS_FOUND)
#  TARGET_LINK_LIBRARIES(NonlocalDamagePlasticityModel ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
#ENDIF(MUMPS_FOUND)
#IF(MINGW)
#  SET_TARGET_PROPERTIES(NonlocalDamagePlasticityModel PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
#ENDIF(MINGW)

# Import Gmsh
ADD_EXECUTABLE(ImportGmsh ImportGmsh.cpp)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ImportGmsh.msh
    ${CMAKE_CURRENT_BINARY_DIR}/ImportGmsh.msh COPYONLY)
TARGET_LINK_LIBRARIES(ImportGmsh NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(ImportGmsh NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(ImportGmsh ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(ImportGmsh PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::ImportGmsh ${CMAKE_CURRENT_BUILD_DIR}/ImportGmsh)

# Plane2D4NFreeHangingNode
ADD_EXECUTABLE(Plane2D4NFreeHangingNode Plane2D4NFreeHangingNode.cpp)
TARGET_LINK_LIBRARIES(Plane2D4NFreeHangingNode NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(Plane2D4NFreeHangingNode NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
ADD_TEST(EXAMPLES::Cpp::Plane2D4NFreeHangingNode ${CMAKE_CURRENT_BUILD_DIR}/Plane2D4NFreeHangingNode)

 
# # Plane2D4NFreeHangingNode
# ADD_EXECUTABLE(Plane2D4NFreeHangingNode Plane2D4NFreeHangingNode.cpp)
# TARGET_LINK_LIBRARIES(Plane2D4NFreeHangingNode NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
# IF (ENABLE_VISUALIZE)
#   TARGET_LINK_LIBRARIES(Plane2D4NFreeHangingNode NuToVisualize)
# ENDIF (ENABLE_VISUALIZE)
# IF(MUMPS_FOUND)
#   TARGET_LINK_LIBRARIES(Plane2D4NFreeHangingNode ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# ENDIF(MUMPS_FOUND)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(Plane2D4NFreeHangingNode PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)
 
# Plane2D4N
ADD_EXECUTABLE(VisualizePlane2D4N VisualizePlane2D4N.cpp)
TARGET_LINK_LIBRARIES(VisualizePlane2D4N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(VisualizePlane2D4N NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(VisualizePlane2D4N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(VisualizePlane2D4N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
 
# # Tetrahedron 10N
# ADD_EXECUTABLE(Tetrahedron10N Tetrahedron10N.cpp)
# TARGET_LINK_LIBRARIES(Tetrahedron10N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
# IF (ENABLE_VISUALIZE)
#   TARGET_LINK_LIBRARIES(Tetrahedron10N NuToVisualize)
# ENDIF (ENABLE_VISUALIZE)
# IF(MUMPS_FOUND)
#   TARGET_LINK_LIBRARIES(Tetrahedron10N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# ENDIF(MUMPS_FOUND)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(Tetrahedron10N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)


# Truss1D2NReference
ADD_EXECUTABLE(Truss1D2NReference Truss1D2NReference.cpp)
TARGET_LINK_LIBRARIES(Truss1D2NReference NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(Truss1D2NReference NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(Truss1D2NReference ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(Truss1D2NReference PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::Truss1D2NReference ${CMAKE_CURRENT_BUILD_DIR}/Truss1D2NReference)


# Truss1D2N
ADD_EXECUTABLE(Truss1D2N Truss1D2N.cpp)
TARGET_LINK_LIBRARIES(Truss1D2N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(Truss1D2N NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MUMPS_FOUND)
  TARGET_LINK_LIBRARIES(Truss1D2N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
ENDIF(MUMPS_FOUND)
IF(MINGW)
  SET_TARGET_PROPERTIES(Truss1D2N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)

# 
# # Truss1DMultiphase
# ADD_EXECUTABLE(Truss1DMultiphase Truss1DMultiphase.cpp)
# TARGET_LINK_LIBRARIES(Truss1DMultiphase NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
# IF (ENABLE_VISUALIZE)
#   TARGET_LINK_LIBRARIES(Truss1DMultiphase NuToVisualize)
# ENDIF (ENABLE_VISUALIZE)
# IF(MUMPS_FOUND)
#   TARGET_LINK_LIBRARIES(Truss1DMultiphase ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# ENDIF(MUMPS_FOUND)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(Truss1DMultiphase PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)

 
# # VirtualFunctionsVsDynamicCast
# ADD_EXECUTABLE(VirtualFunctionsVsDynamicCast VirtualFunctionsVsDynamicCastClasses.cpp VirtualFunctionsVsDynamicCast.cpp)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(VirtualFunctionsVsDynamicCast PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)
# 
# # Crack
ADD_EXECUTABLE(CrackPlane2D4N CrackPlane2D4N.cpp)
TARGET_LINK_LIBRARIES(CrackPlane2D4N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES}  ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(CrackPlane2D4N NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MINGW)
  SET_TARGET_PROPERTIES(CrackPlane2D4N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::CrackPlane2D4N ${CMAKE_CURRENT_BUILD_DIR}/CrackPlane2D4N)
 
IF (ENABLE_GEOMETRYCONCRETE)
ADD_EXECUTABLE(GeometryConcrete2D GeometryConcrete2D.cpp)
TARGET_LINK_LIBRARIES(GeometryConcrete2D NuToMechanics NuToMath NuToBase NuToGeometryConcrete ${Boost_LIBRARIES})
IF (ENABLE_VISUALIZE)
  TARGET_LINK_LIBRARIES(GeometryConcrete2D NuToVisualize)
ENDIF (ENABLE_VISUALIZE)
IF(MINGW)
  SET_TARGET_PROPERTIES(GeometryConcrete2D PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
ENDIF(MINGW)
ADD_TEST(EXAMPLES::Cpp::GeometryConcrete2D ${CMAKE_CURRENT_BUILD_DIR}/GeometryConcrete2D)
ENDIF (ENABLE_GEOMETRYCONCRETE)

# # PhantomNodeMethod
# ADD_EXECUTABLE(PhantomNodeMethodPlane2D4N PhantomNodeMethodPlane2D4N.cpp)
# TARGET_LINK_LIBRARIES(PhantomNodeMethodPlane2D4N NuToMechanics NuToMath NuToBase ${Boost_LIBRARIES}  ${LAPACK_LIBRARIES} ${ANN_LIBRARIES})
# IF (ENABLE_VISUALIZE)
#   TARGET_LINK_LIBRARIES(PhantomNodeMethodPlane2D4N NuToVisualize)
# ENDIF (ENABLE_VISUALIZE)
# IF(MUMPS_FOUND)
#   TARGET_LINK_LIBRARIES(PhantomNodeMethodPlane2D4N ${MUMPS_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# ENDIF(MUMPS_FOUND)
# IF(MINGW)
#   SET_TARGET_PROPERTIES(PhantomNodeMethodPlane2D4N PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
# ENDIF(MINGW)
# 


# MortonOrder
#Grid3D
ADD_EXECUTABLE(MortonOrder MortonOrder.cpp)
TARGET_LINK_LIBRARIES(MortonOrder NuToMath NuToBase)
