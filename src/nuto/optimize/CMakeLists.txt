SET(NuToOptimize_SOURCES
  ConjugateGradient.cpp
  CallbackHandlerPython.cpp
  OptimizeException.cpp
)

SET(NuToOptimize_SWIG_MODULES
  ModulOptimizer
)

# build shared library
ADD_LIBRARY(NuToOptimize STATIC ${NuToOptimize_SOURCES})
IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
  SET_TARGET_PROPERTIES(NuToOptimize PROPERTIES COMPILE_FLAGS "-fPIC")
ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )

# install shared library
INSTALL(TARGETS NuToOptimize ARCHIVE DESTINATION ${NUTO_LIBRARIES_INSTALL_PATH})

# build python modules
CONFIGURE_FILE(__init__.py ${CMAKE_CURRENT_BINARY_DIR}/__init__.py)
NUTO_INSTALL_PYTHON_FILE(__init__.py ${NUTO_PYTHON_MODULES_INSTALL_PATH}/nuto/optimize)
FOREACH(NuToOptimize_SWIG_MODULE ${NuToOptimize_SWIG_MODULES})
  SET_SOURCE_FILES_PROPERTIES(${NuToOptimize_SWIG_MODULE}.i PROPERTIES CPLUSPLUS ON)
  SET_SOURCE_FILES_PROPERTIES(${NuToOptimize_SWIG_MODULE}.i PROPERTIES SWIG_FLAGS "${NuTo_SWIG_FLAGS}")
  SWIG_ADD_MODULE(${NuToOptimize_SWIG_MODULE} python ${NuToOptimize_SWIG_MODULE}.i)
  SWIG_LINK_LIBRARIES(${NuToOptimize_SWIG_MODULE} NuToOptimize NuToMath NuToBase ${Boost_LIBRARIES} ${PYTHON_LIBRARIES})
  # check for unresolved symbols
  IF( NOT CYGWIN AND NOT WIN32 )
    SET_TARGET_PROPERTIES(${SWIG_MODULE_${NuToOptimize_SWIG_MODULE}_REAL_NAME} PROPERTIES LINK_FLAGS -Wl,-z,defs)
  ENDIF( NOT CYGWIN AND NOT WIN32 )
  IF(MINGW)
    SET_TARGET_PROPERTIES(${SWIG_MODULE_${NuToOptimize_SWIG_MODULE}_REAL_NAME} PROPERTIES LINK_FLAGS -Wl,--enable-auto-import)
  ENDIF(MINGW)
  NUTO_INSTALL_SWIG_PYTHON_MODULE(${NuToOptimize_SWIG_MODULE} ${NUTO_PYTHON_MODULES_INSTALL_PATH}/nuto/optimize)
ENDFOREACH(NuToOptimize_SWIG_MODULE)
