# $Id$

# Project name (languages C and Fortran must be enabled in order to find LAPACK)
PROJECT(NuTo CXX C Fortran)
# Minimum version for cmake 2.6
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
# Get information during make
SET(CMAKE_VERBOSE_MAKEFILE OFF)

# options
OPTION(ENABLE_MKL "enables support for mkl blas, lapack, solvers" TRUE)
OPTION(ENABLE_MUMPS "enables support for MUMPS solver" TRUE)
OPTION(ENABLE_DEBUG "enables debug information" TRUE)
OPTION(ENABLE_DEBUG_SERIALIZATION "prints additional debug information during serialization" FALSE)
OPTION(ENABLE_STATIC_EXTERNALS "enables linking with static external libraries" TRUE)
OPTION(ENABLE_OPENMP "enables OpenMP" false)
OPTION(ENABLE_SERIALIZATION "enables serialization" true)
OPTION(ENABLE_VERBOSELEVEL "enables status messages during the execution by setting the verboselevel" true)
OPTION(ENABLE_MECHANICS "enables the mechanics package" TRUE)
OPTION(ENABLE_METAMODEL "enables the metamodel package" TRUE)
OPTION(ENABLE_OPTIMIZE "enables the optimize package" TRUE)
OPTION(ENABLE_VISUALIZE "enables the visualization package" TRUE)
OPTION(ENABLE_EXAMPLES "enables examples" TRUE)
OPTION(ENABLE_SHOW_TIME "shows for each python command the execution time" TRUE)
OPTION(ENABLE_PYTHON_TESTS "create makefiles for python tests" TRUE)
OPTION(ENABLE_C++_TESTS "create makefiles for c++ tests" TRUE)
OPTION(ENABLE_GUI "enable building the GUI application" TRUE)

IF(ENABLE_METAMODEL)
    SET(ENABLE_OPTIMIZE TRUE)
ENDIF(ENABLE_METAMODEL)

IF(ENABLE_MECHANICS)
    ADD_DEFINITIONS("-DENABLE_MECHANICS")
    SET(NuTo_DOXYGEN_PREDEFINED "ENABLE_MECHANICS" ${NuTo_DOXYGEN_PREDEFINED})
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};-DENABLE_MECHANICS")
ENDIF(ENABLE_MECHANICS)

IF(ENABLE_VISUALIZE)
    ADD_DEFINITIONS("-DENABLE_VISUALIZE")
    SET(NuTo_DOXYGEN_PREDEFINED "ENABLE_VISUALIZE" ${NuTo_DOXYGEN_PREDEFINED})
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};-DENABLE_VISUALIZE")
ENDIF(ENABLE_VISUALIZE)

IF (ENABLE_SERIALIZATION)
    ADD_DEFINITIONS("-DENABLE_SERIALIZATION")
    SET(NuTo_DOXYGEN_PREDEFINED "ENABLE_SERIALIZATION" ${NuTo_DOXYGEN_PREDEFINED})
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};-DENABLE_SERIALIZATION")
ENDIF(ENABLE_SERIALIZATION)

IF (ENABLE_VERBOSELEVEL)
    ADD_DEFINITIONS("-DENABLE_VERBOSELEVEL")
    SET(NuTo_DOXYGEN_PREDEFINED "ENABLE_VERBOSELEVEL" ${NuTo_DOXYGEN_PREDEFINED})
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};-DENABLE_VERBOSELEVEL")
ENDIF(ENABLE_VERBOSELEVEL)

IF(ENABLE_SHOW_TIME)
    ADD_DEFINITIONS("-DSHOW_TIME")
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};-DSHOW_TIME")
ENDIF(ENABLE_SHOW_TIME)

# search path for external libraries
# check if NUTO_EXTERNAL_LIBRARIES_ROOT is set
IF(NOT NUTO_EXTERNAL_LIBRARIES_ROOT AND DEFINED $ENV{NUTO_EXTERNAL_LIBRARIES_ROOT})
  SET(NUTO_EXTERNAL_LIBRARIES_ROOT $ENV{NUTO_EXTERNAL_LIBRARIES_ROOT})
ENDIF(NOT NUTO_EXTERNAL_LIBRARIES_ROOT AND DEFINED $ENV{NUTO_EXTERNAL_LIBRARIES_ROOT})
# convert path to unix style path and set search path
IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
  FILE(TO_CMAKE_PATH ${NUTO_EXTERNAL_LIBRARIES_ROOT} NUTO_EXTERNAL_LIBRARIES_ROOT)
ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)

# set build type
IF(ENABLE_DEBUG)
  ADD_DEFINITIONS("-DDEBUG")
  SET(CMAKE_BUILD_TYPE "Debug")
ELSE(ENABLE_DEBUG)
  IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
  ENDIF(NOT CMAKE_BUILD_TYPE)
ENDIF(ENABLE_DEBUG)
#message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")

IF(ENABLE_DEBUG_SERIALIZATION)
  ADD_DEFINITIONS("-DDEBUG_SERIALIZATION")
ENDIF(ENABLE_DEBUG_SERIALIZATION)

# set module path for modified scripts
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeScripts ${CMAKE_MODULE_PATH})
INCLUDE(NuToMacros)

# find openmp
IF(ENABLE_OPENMP)
  MESSAGE(STATUS "Checking for OpenMP support ...")
  FIND_PACKAGE(OpenMP)
  IF(OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    IF(NOT MINGW)
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Xlinker -export-dynamic")
    ENDIF(NOT MINGW)
    IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
    ENDIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
  ENDIF(OPENMP_FOUND)
ELSE(ENABLE_OPENMP)
  SET(OPENMP_FOUND FALSE)
  FIND_PACKAGE(Threads REQUIRED)
ENDIF(ENABLE_OPENMP)

IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ansi -Wall -Wno-long-long -pedantic-errors -std=c++0x")
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")

# Python required for interface files c++ and python
MESSAGE(STATUS "Checking for Python...")
FIND_PACKAGE(PythonLibs REQUIRED)
FIND_PACKAGE(PythonInterp REQUIRED)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
#get python version
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import sys;print(sys.version[:3]);" OUTPUT_VARIABLE PYTHON_VERSION)
STRING(REGEX REPLACE "\n" "" PYTHON_VERSION ${PYTHON_VERSION})
#message(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
#message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")

# set relative paths for install
SET(LIB_SUFFIX "" CACHE STRING "Define suffix of directory name (32/64)" )
SET(NUTO_LIBRARIES_INSTALL_PATH "lib${LIB_SUFFIX}")
SET(NUTO_INCLUDE_INSTALL_PATH "include")
SET(NUTO_PYTHON_MODULES_INSTALL_PATH "lib${LIB_SUFFIX}/python${PYTHON_VERSION}/site-packages")

# SWIG required for interface files c++ and python
MESSAGE(STATUS "Checking for SWIG...")
FIND_PACKAGE(SWIG REQUIRED)
#MESSAGE(STATUS "SWIG found: ${SWIG_EXECUTABLE}")
INCLUDE(${SWIG_USE_FILE})
SET(NuTo_SWIG_FLAGS "-Wall;-fvirtual;${NuTo_SWIG_FLAGS}")

# search for MKL
IF(ENABLE_MKL)
  MESSAGE(STATUS "Checking for MKL LAPACK and MKL SOLVER ...")
  FIND_PACKAGE(MKLSolver)
  IF(MKLSolver_FOUND)
    MESSAGE(STATUS "MKLSolver_LIBRARIES = ${MKLSolver_LIBRARIES}")
    MESSAGE(STATUS "MKLSolver_INCLUDE_DIR = ${MKLSolver_INCLUDE_DIR}")
    MESSAGE(STATUS "MKLSolver_DEFINITIONS = ${MKLSolver_DEFINITIONS}")
    ADD_DEFINITIONS(${MKLSolver_DEFINITIONS})
    SET(NuTo_DOXYGEN_PREDEFINED "${MKLSolver_DOXYGEN_DEFINITIONS}" ${NuTo_DOXYGEN_PREDEFINED})
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};${MKLSolver_DEFINITIONS}")
    INCLUDE_DIRECTORIES(${MKLSolver_INCLUDE_DIR})
  ENDIF(MKLSolver_FOUND)
ENDIF(ENABLE_MKL)

# boost
MESSAGE(STATUS "Checking for Boost...")
SET(Boost_ADDITIONAL_VERSIONS "1.41.0;1.41;1.42;1.43;1.44;1.45")
IF(ENABLE_STATIC_EXTERNALS)
  SET(Boost_USE_STATIC_LIBS TRUE)
ENDIF(ENABLE_STATIC_EXTERNALS)
#SET(Boost_DEBUG TRUE)
SET(Boost_DETAILED_FAILURE_MSG TRUE)
IF(NOT BOOST_ROOT AND NOT DEFINED $ENV{BOOST_ROOT})
IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
  SET(BOOST_ROOT ${NUTO_EXTERNAL_LIBRARIES_ROOT})
ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)
ENDIF(NOT BOOST_ROOT AND NOT DEFINED $ENV{BOOST_ROOT})

IF(ENABLE_SERIALIZATION)
  FIND_PACKAGE(Boost 1.44.0 COMPONENTS serialization REQUIRED)
ELSE(ENABLE_SERIALIZATION)
  FIND_PACKAGE(Boost 1.41.0 REQUIRED)
ENDIF(ENABLE_SERIALIZATION)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
message(STATUS "...Boost_VERSION = ${Boost_VERSION}")
message(STATUS "...Boost version = ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}")
message(STATUS "...Boost_LIBRARIES = ${Boost_LIBRARIES}")
message(STATUS "...Boost_LIBRARIES = ${Boost_LIBRARIES}")
message(STATUS "...Boost_LIBRARY_DIRS = ${Boost_LIBRARY_DIRS}")
message(STATUS "...Boost_SERIALIZATION_FOUND = ${Boost_SERIALIZATION_FOUND}")
message(STATUS "...Boost_SERIALIZATION_LIBRARY = ${Boost_SERIALIZATION_LIBRARY}")
message(STATUS "...BOOST_INCLUDE_DIR = ${BOOST_INCLUDE_DIR}")
message(STATUS "...BOOST_INCLUDE_DIRS = ${BOOST_INCLUDE_DIRS}")

# find mumps solver
IF(ENABLE_MUMPS)
  IF(NOT MUMPS_ROOT AND NOT DEFINED $ENV{MUMPS_ROOT})
    IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
      SET(MUMPS_ROOT ${NUTO_EXTERNAL_LIBRARIES_ROOT})
    ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)
  ENDIF(NOT MUMPS_ROOT AND NOT DEFINED $ENV{MUMPS_ROOT})
  IF(ENABLE_STATIC_EXTERNALS)
    SET(MUMPS_FIND_STATIC_LIBRARY TRUE)
  ENDIF(ENABLE_STATIC_EXTERNALS)
  IF(NOT METIS_ROOT AND NOT DEFINED $ENV{METIS_ROOT})
    IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
      SET(METIS_ROOT ${NUTO_EXTERNAL_LIBRARIES_ROOT})
    ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)
  ENDIF(NOT METIS_ROOT AND NOT DEFINED $ENV{METIS_ROOT})
  SET(MUMPS_DEBUG TRUE)
  FIND_PACKAGE(MUMPS REQUIRED)
  IF(MUMPS_FOUND)
    ADD_DEFINITIONS("-DHAVE_MUMPS")
    SET(NuTo_DOXYGEN_PREDEFINED "HAVE_MUMPS" ${NuTo_DOXYGEN_PREDEFINED})
    SET(NuTo_SWIG_FLAGS "${NuTo_SWIG_FLAGS};-DHAVE_MUMPS")
    INCLUDE_DIRECTORIES(${MUMPS_INCLUDE_DIR})
    message(STATUS "...MUMPS_INCLUDE_DIR = ${MUMPS_INCLUDE_DIR}")
  ENDIF(MUMPS_FOUND)
ELSE(ENABLE_MUMPS)
  SET(MUMPS_FOUND FALSE)
  message(STATUS "...MUMPS not switched on")
ENDIF(ENABLE_MUMPS)

# find Mersenne Twister random number generator
IF(NOT MERSENNE_ROOT AND NOT DEFINED $ENV{MERSENNE_ROOT})
  IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
    SET(MERSENNE_ROOT ${NUTO_EXTERNAL_LIBRARIES_ROOT})
  ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)
ENDIF(NOT MERSENNE_ROOT AND NOT DEFINED $ENV{MERSENNE_ROOT})
IF(ENABLE_STATIC_EXTERNALS)
  SET(MERSENNE_FIND_STATIC_LIBRARY TRUE)
ENDIF(ENABLE_STATIC_EXTERNALS)
SET(MERSENNE_DEBUG TRUE)
FIND_PACKAGE(Mersenne REQUIRED)
IF(MERSENNE_FOUND)
  INCLUDE_DIRECTORIES(${MERSENNE_INCLUDE_DIR})
ENDIF(MERSENNE_FOUND)


# find ANN library for nearest neighbor search
IF(NOT ANN_ROOT AND NOT DEFINED $ENV{ANN_ROOT})
  IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
    SET(ANN_ROOT ${NUTO_EXTERNAL_LIBRARIES_ROOT})
  ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)
ENDIF(NOT ANN_ROOT AND NOT DEFINED $ENV{ANN_ROOT})
IF(ENABLE_STATIC_EXTERNALS)
  SET(ANN_FIND_STATIC_LIBRARY TRUE)
ENDIF(ENABLE_STATIC_EXTERNALS)
SET(ANN_DEBUG TRUE)
FIND_PACKAGE(ANN REQUIRED)
IF(ANN_FOUND)
  INCLUDE_DIRECTORIES(${ANN_INCLUDE_DIR})
ENDIF(ANN_FOUND)

# find Eigen header files (Linear Algebra)
IF(NOT EIGEN_ROOT AND NOT DEFINED $ENV{EIGEN_ROOT})
  IF(NUTO_EXTERNAL_LIBRARIES_ROOT)
    SET(EIGEN_ROOT ${NUTO_EXTERNAL_LIBRARIES_ROOT})
  ENDIF(NUTO_EXTERNAL_LIBRARIES_ROOT)
ENDIF(NOT EIGEN_ROOT AND NOT DEFINED $ENV{EIGEN_ROOT})
FIND_PACKAGE(Eigen REQUIRED)
IF(EIGEN_FOUND)
  INCLUDE_DIRECTORIES(${EIGEN_INCLUDE_DIR})
ENDIF(EIGEN_FOUND)

# find lapack library
FIND_PACKAGE(LAPACK REQUIRED)

# build nuto
ADD_SUBDIRECTORY(src)

# Documentation
ADD_SUBDIRECTORY(doc)

#test Environment
INCLUDE(CTest)

IF(ENABLE_MECHANICS OR ENABLE_METAMODEL OR ENABLE_OPTIMIZE OR ENABLE_EXAMPLES)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)
ENDIF(ENABLE_MECHANICS OR ENABLE_METAMODEL OR ENABLE_OPTIMIZE OR ENABLE_EXAMPLES)

ADD_SUBDIRECTORY(test/math)
IF(ENABLE_MECHANICS)
  ADD_SUBDIRECTORY(test/mechanics)
ENDIF(ENABLE_MECHANICS)

IF(ENABLE_METAMODEL)
  ADD_SUBDIRECTORY(test/metamodel)
ENDIF(ENABLE_METAMODEL)


IF(ENABLE_OPTIMIZE)
  ADD_SUBDIRECTORY(test/optimize)
ENDIF(ENABLE_OPTIMIZE)


IF(ENABLE_EXAMPLES)
  ADD_SUBDIRECTORY(examples)
ENDIF(ENABLE_EXAMPLES)

#MESSAGE(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
#MESSAGE(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
#MESSAGE(STATUS "CMAKE_Fortran_COMPILER: ${CMAKE_Fortran_COMPILER}")
#MESSAGE(STATUS "CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
#MESSAGE(STATUS "NuTo_DOXYGEN_PREDEFINED: ${NuTo_DOXYGEN_PREDEFINED}")
